{"version":3,"file":"static/js/8936.38df2e9a.chunk.js","mappings":"qIAAA,IAAIA,EAAK,SAAUC,GACf,IAAIC,EAAOC,KACXD,EAAKD,OAASA,EAEdC,EAAKE,OAAS,CAAC,EAEfF,EAAKG,YAAc,GAEnBH,EAAKI,GAAK,EAEVJ,EAAKD,OAASA,EAEdC,EAAKK,KAAK,IAGVL,EAAKM,IAAG,SAAUC,GAChB,IAAIC,EAAS,wCAMb,GAJAC,aAAaT,EAAKU,2BAIdH,IAASC,EAAS,QAAS,CAE7BR,EAAKW,WAAaC,aAAY,WAIxBb,EAAOc,QACTb,EAAKc,OAER,GAAE,IAGHC,YAAW,WACTf,EAAKK,KAAKG,EAAS,mBACpB,GAAE,KACHR,EAAKU,0BAA4BK,YAAW,WAC1Cf,EAAKc,OACN,GAAE,IACJ,CACF,GACF,EAGDhB,EAAGkB,UAAUV,GAAK,SAAUW,GAC1B,IAAIjB,EAAOC,KACPiB,EAAUjB,KAAKG,KACfF,EAASF,EAAKE,OAClBA,EAAOgB,GAAW,SAAUC,GACR,oBAAPF,GAAqBE,EAAEC,SAAWpB,EAAKD,QAChDkB,EAAGE,EAAEZ,KAER,EACDc,OAAOC,iBAAiB,UAAWpB,EAAOgB,IAAU,EACrD,EAEDpB,EAAGkB,UAAUX,KAAO,SAAUE,GAC5B,IAAIR,EAASE,KAAKF,OACdA,IAAWA,EAAOc,QAAUd,EAAOwB,YACrCxB,EAAOwB,YAAYhB,EAAM,KAEzBiB,QAAQC,IAAI,0BAEf,EAED3B,EAAGkB,UAAUU,IAAM,SAAUR,GAC3B,IAAIhB,EAASD,KAAKC,OAClB,GAAIgB,EACFjB,KAAK0B,SAAST,QAEd,IAAK,IAAMU,KAAO1B,EACZ2B,OAAOC,eAAeC,KAAK7B,EAAQ0B,IACrC3B,KAAK0B,SAASC,EAIrB,EACD9B,EAAGkB,UAAUW,SAAW,SAAUT,GAChC,IAAIhB,EAASD,KAAKC,OAClBmB,OAAOW,oBAAoB,UAAW9B,EAAOgB,IAAU,GACnDhB,EAAOgB,WACFhB,EAAOgB,EAEjB,EAEDpB,EAAGkB,UAAUiB,MAAQ,SAAUhB,GAC7BA,EAAmB,oBAAPA,EAAoBA,EAAK,WAAc,EAC/ChB,KAAKiC,YACPjB,IAEAhB,KAAKE,YAAYgC,KAAKlB,EAEzB,EAEDnB,EAAGkB,UAAUoB,QAAU,SAAUnB,GAC/B,IAAIjB,EAAOC,KACXD,EAAK0B,MACL1B,EAAO,IACR,EAEDF,EAAGkB,UAAUF,MAAQ,SAAUG,GAC7BI,OAAOP,OACR,EAEH,W","sources":["js/popupWindowMessageManager.js"],"sourcesContent":["var MM = function (opener) {\n    var self = this;\n    self.opener = opener;\n    // 绑定的事件\n    self.events = {};\n    // 未准备好时事件存储\n    self.readyEvents = [];\n    // 事件计数id\n    self.id = 0;\n    // 父页面\n    self.opener = opener;\n    // 发一个空通知，让父页面知道我准备好了\n    self.post('');\n\n    // 收到父亲页面关闭通知时，关闭页面\n    self.on(function (data) {\n      var prefix = '14B0CF90_77EE_4503_B996_EC75241E281B_';\n      // 如果收到任何信息，说明父页面还没关闭\n      clearTimeout(self._heartcheckTimeoutCloseId);\n      // 父页面是在beforeunload发出这知消息，不知道父页面是不是真的关闭了\n      // 而且关闭了，closed也不是马上为false, 得过一会（具体数值不确定）才为true，所以interval检查最快\n      // 另外reload的情况，closed会一直为false，此时要尝试心跳检测，发信息给原来的页面，如果原来页面没刷新，则会返回消息\n      if (data === prefix + 'CLOSE') {\n        var count = 0;\n        self.intervalId = setInterval(function () {\n          if (count > 50) {\n            clearInterval(self.intervalId);\n          }\n          if (opener.closed) {\n            self.close();\n          }\n        }, 20);\n\n        // reload\n        setTimeout(function () {\n          self.post(prefix + 'CLOSE_HEARTCHECK');\n        }, 100);\n        self._heartcheckTimeoutCloseId = setTimeout(function () {\n          self.close();\n        }, 200);\n      }\n    });\n  };\n\n  // 监听接收消息\n  MM.prototype.on = function (fn) {\n    var self = this;\n    var eventId = this.id++;\n    var events = self.events;\n    events[eventId] = function (e) {\n      if (typeof fn === 'function' && e.source === self.opener) {\n        fn(e.data);\n      }\n    };\n    window.addEventListener('message', events[eventId], false);\n  };\n  // 发送消息\n  MM.prototype.post = function (data) {\n    var opener = this.opener;\n    if (opener && !opener.closed && opener.postMessage) {\n      opener.postMessage(data, '*');\n    } else {\n      console.log('window.opener is closed');\n    }\n  };\n  // 解绑接收消息\n  MM.prototype.off = function (eventId) {\n    var events = this.events;\n    if (eventId) {\n      this._offItem(eventId);\n    } else {\n      for (const key in events) {\n        if (Object.hasOwnProperty.call(events, key)) {\n          this._offItem(key);\n        }\n      }\n    }\n  };\n  MM.prototype._offItem = function (eventId) {\n    var events = this.events;\n    window.removeEventListener('message', events[eventId], false);\n    if (events[eventId]) {\n      delete events[eventId];\n    }\n  };\n  // 准备后处理\n  MM.prototype.ready = function (fn) {\n    fn = typeof fn === 'function' ? fn : function () {};\n    if (this.openerReady) {\n      fn();\n    } else {\n      this.readyEvents.push(fn);\n    }\n  };\n  // 销毁\n  MM.prototype.destroy = function (fn) {\n    var self = this;\n    self.off();\n    self = null;\n  };\n  // 关闭窗口\n  MM.prototype.close = function (fn) {\n    window.close();\n  };\n\nexport default MM;\n\n"],"names":["MM","opener","self","this","events","readyEvents","id","post","on","data","prefix","clearTimeout","_heartcheckTimeoutCloseId","intervalId","setInterval","closed","close","setTimeout","prototype","fn","eventId","e","source","window","addEventListener","postMessage","console","log","off","_offItem","key","Object","hasOwnProperty","call","removeEventListener","ready","openerReady","push","destroy"],"sourceRoot":""}